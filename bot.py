import logging
import os
import json
from aiogram import Bot, Dispatcher, types, executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏ admin username –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "@your_username")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ JSON
def load_catalog():
    with open("catalog.json", encoding="utf-8") as f:
        return json.load(f)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("ü™¥ –ö–∞—Ç–∞–ª–æ–≥", "üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    keyboard.add("üöö –î–æ—Å—Ç–∞–≤–∫–∞", "üìû –°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω —Ä–∞—Å—Ç–µ–Ω–∏–π üåø", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "ü™¥ –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    catalog = load_catalog()
    for item in catalog:
        text = f"**{item['name']}**\n–¶–µ–Ω–∞: {item['price']}\n{item['description']}"
        photo = item["photo"]
        await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=text, parse_mode="Markdown")

@dp.message_handler(lambda msg: msg.text == "üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def order_request(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n1. –§–ò–û\n2. –ê–¥—Ä–µ—Å\n3. –¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram\n4. –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è\n5. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)")

@dp.message_handler(lambda msg: msg.text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞")
async def show_shipping(message: types.Message):
    await message.reply("–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –†–æ—Å—Å–∏–∏ –∏ –°–ù–ì. –û–ø–ª–∞—Ç–∞ ‚Äî –ø–µ—Ä–µ–≤–æ–¥–æ–º. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º.")

@dp.message_handler(lambda msg: msg.text == "üìû –°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º")
async def contact_seller(message: types.Message):
    await message.reply(f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º: {ADMIN_USERNAME}")

# –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∞–¥–º–∏–Ω—É
@dp.message_handler()
async def forward_order(message: types.Message):
    await message.reply("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ üå±")
    await bot.send_message(chat_id=ADMIN_USERNAME, text=f"üì¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}:\n\n{message.text}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
